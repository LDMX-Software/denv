.TH "DENV" "1" "Jun 2023" "denv" "User Manual"
.SH NAME
.PP
denv v0.0.0
.SH SYNOPSIS
.PP
\f[B]denv\f[] version
.PP
\f[B]denv\f[] init [help|\-h|\-\-help] IMAGE [WORKSPACE]
[\-\-no\-gitignore]
.PP
\f[B]denv\f[] config [help|\-h|\-\-help]
.PP
\f[B]denv\f[] config print
.PP
\f[B]denv\f[] config home DIR
.PP
\f[B]denv\f[] config image
.PP
\f[B]denv\f[] config mounts DIR0 [DIR1 DIR2 ...]
.PP
\f[B]denv\f[] config shell SHELL
.PP
\f[B]denv\f[] [COMMAND] [args...]
.SH DESCRIPTION
.PP
\f[B]denv\f[] is a light, POSIX\-compliant wrapper around a few common
container managers, allowing the user to efficiently interact with
container\-ized envorinments uniformly across systems with different
installed managers.
.SS OPTIONS
.PP
\f[B]denv\f[] is light on options since most configuration of the actual
development environment is left to the construction of the image.
Generally, the \f[C]help\f[] option (with aliases \f[C]\-h\f[] and
\f[C]\-\-help\f[]) print out a short help message for \f[B]denv\f[] or
one of its sub commands.
.PP
\f[B]\-\-help\f[], \f[B]\-h\f[], or \f[B]help\f[] print a short help
message for \f[B]denv\f[] or one of its sub commands
.PP
\f[B]\-\-no\-gitignore\f[] do not generate a gitignore file when setting
up a new denv configuration
.SS ARGUMENTS
.PP
\f[B]IMAGE\f[] the name of a container image to use when starting a
container to host the developer environment
.PP
\f[B]WORKSPACE\f[] the directory where the environment should be stored
and configured, used by default as the home directory within the
developer environment so that the environment can also have its own
shell configuration files and \f[B]~/.local\f[] paths.
.PP
\f[B]SHELL\f[] the program to use as the interactive shell within the
containerized environment.
.PP
\f[B]COMMAND\f[] a program to run inside of the containerized
environment (can have its own arguments).
If no COMMAND is given, then SHELL will be executed.
.SH EXAMPLES
.PP
\f[B]denv\f[] is meant to be used after building a containerized
developer environment.
Look at the online manual for help getting started on developing the
environment itself, but for these examples, we will assume that you
already have an image built in which you wish to develop.
.PP
First, we go into the directory that holds the code we wish to develop
and tell denv that this workspace should be running a specific image for
its developer environment.
.IP
.nf
\f[C]
denv\ init\ myuser/myrepo:mytag
\f[]
.fi
.PP
Then we can open a shell in the denv.
.IP
.nf
\f[C]
denv
\f[]
.fi
.PP
Now you can build and run programs from within the denv with its
solidified set of software and tools while still editing the code files
themselves with whatever text editor you wish outside of the denv.
The init command produces a configuration file \f[C]\&.denv/config\f[]
which you can share between users and so it is excluded from the default
\f[C]\&.gitignore\f[] generated within \f[C]\&.denv\f[].
All other files within \f[C]\&.denv\f[] are internal to denv and can
only be modified at your own risk.
.SH INSTALLATION
.SS curl
.PP
If you trust me (or have proofread the install script), you can install
denv with a one\-liner.
.IP
.nf
\f[C]
curl\ \-s\ https://raw.githubusercontent.com/tomeichlersmith/denv/main/install\ |\ sh\ 
\f[]
.fi
.PP
By default, this installs denv to ~/.local if you are a non\-root user.
You can define the install prefix (\-\-prefix dir) and choose to use the
HEAD of the main branch rather than the last release (\-\-next) both of
which are optional.
.IP
.nf
\f[C]
curl\ \-s\ https://raw.githubusercontent.com/tomeichlersmith/denv/main/install\ |\ \\
\ \ sh\ \-s\ \-\-\ \-\-prefix\ dir\ \-\-next
\f[]
.fi
.SS git
.PP
You can install or update denv by obtaining the source code from the
repository https://github.com/tomeichlersmith/denv either by cloning it
or by downloading one of the releases and then running the installation
command.
.IP
.nf
\f[C]
cd\ denv
\&./install
\f[]
.fi
.SH CONTRIBUTING
.PP
Feel free to create a fork of https://github.com/tomeichlersmith/denv
and open a Pull Request with any bug patches or feature improvements.
We aim to keep denv as a single file with optional completion and manual
files in parallel.
Check that denv is still POSIX with dash.
.IP
.nf
\f[C]
dash\ \-n\ denv
\f[]
.fi
.PP
Install shellcheck from https://github.com/koalaman/shellcheck and use
it to make sure denv avoids common shell scripting errors.
.IP
.nf
\f[C]
shellcheck\ \-s\ sh\ \-a\ \-o\ all\ \-Sstyle\ \-Calways\ \-x\ denv
\f[]
.fi
.SH FILES
.PP
This part of the manual is an attempt to list and explain the files
within a \f[C]\&.denv\f[] directory.
