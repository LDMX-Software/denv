#!/bin/sh
# SPDX-License-Identifier: GPL-3.0-only
#
# This file is part of the denv project: https://github.com/tomeichlersmith/denv
#
# Copyright (C) 2021 denv contributors
#
# denv is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# denv is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with denv; if not, see <http://www.gnu.org/licenses/>.

denv_version=0.0.0

# POSIX
set -o errexit
set -o nounset

###################################################################################################
# container runner interface
#
# all container runners must implement three functions
# 1. _denv_image_exists : check ${denv_image} exists locally
# 2. _denv_pull : pull down ${denv_image} to a local copy
# 3. _denv_run : run the container
#   - entrypoint is the denv-entrypoint program 
#   - use image ${denv_image} 
#   - set home directory ${denv_home}
#   - set user and group in container to current user and group
#   - attach all mounts in space-separated list "${denv_mounts}"
#   - pass on all current environment variables
#   - set SHELL to be ${denv_shell} in container
###################################################################################################
_denv_image_exists() {
  echo "checking if ${denv_image} exists..."
  return 1
}
_denv_pull() {
  echo "pulling ${denv_image}"
  return 0
}
_denv_run() {
  echo "running ${denv_image} with "
  echo "  HOME=\"${denv_home}\", MOUNTS=\"${denv_mounts}\", SHELL=\"${denv_shell}\""
  echo "  PWD=\"${PWD}\""
  return 0
}

###################################################################################################
# denv internal helper functions
###################################################################################################

# print each argument on its own line with the first line
# prefixed with "ERROR: ".
_denv_error() {
  printf >&2 "\033[1;31mERROR: \033[0m\033[31m%s\n" "$1"
  shift
  while [ "$#" -gt "0" ]; do
    printf >&2 "       %s\n" "$1"
    shift
  done
  printf >&2 "\033[0m"
}

# deduce where the denv config is being stored
# aka find the workspace
_denv_deduce_workspace() {
  # start from PWD and go up directories until file .denv
  # or reach root directory
  denv_workspace="${PWD}"
  while [ "${denv_workspace}" != "/" ]; do
    if [ -d "${denv_workspace}/.denv" ]; then
      return 0
    fi
    denv_workspace="$(dirname "${denv_workspace}" || true)"
  done
  _denv_error "Unable to deduce a denv workspace!" \
    "Are you in a denv workspace? Do you still need to 'denv init'?"
  return 1
}

# load the denv config from the input workspace
# Arguments
#  ${denv_workspace} env var
# Outputs
#  loaded config into runtime shell environment
_denv_load_config() {
  # I am choosing to allow sourcing unknown code
  # shellcheck disable=SC1091
  . "${denv_workspace}/.denv/config"
}

# write the current config to the file
# Arguments
#  ${denv_workspace} env var
#  env - config variables from runtime env
_denv_write_config() {
  config="${denv_workspace}/.denv/config"
  { 
    echo "denv_home=\"${denv_home}\"";
    echo "denv_image=\"${denv_image}\"";
    echo "denv_shell=\"${denv_shell}\"";
    echo "denv_mounts=\"${denv_mounts}\"";
  } > "${config}"
}

# print the current denv config
# Arguments
#  all denv_* env vars
_denv_config_print() {
  printf "denv_home=\"%s\"\ndenv_image=\"%s\"\ndenv_shell=\"%s\"\ndenv_mounts=\"%s\"\n" \
    "${denv_home}" "${denv_image}" "${denv_shell}" "${denv_mounts}"
}

# config the home directory of the denv
# Arguments
#  1 - path to new home directory for the denv
# Outputs
#  adds the old home to denv_mounts
#  sets denv_home to the new home
_denv_config_home() {
  new_home="$1"
  if [ ! -d "${new_home}" ]; then
    _denv_error "New home directory does not exist."
    return 1
  fi
  denv_mounts="${denv_home} ${denv_mounts}"
  denv_home="${new_home}"
}

# pull down the ${denv_image} if it doesn't exist
# locally, if it does exist locally, check
# with the user if they wish for denv to pull
# Arguments
#  denv_image (same as _denv_image_exists and _denv_pull)
_denv_config_checked_pull() {
  # I do want to fail-quiet here and so I implicitly
  # disable the 'set -e' flag which would normally
  # exit the program with any non-zero exit status
  # shellcheck disable=SC2310
  if ! _denv_image_exists; then
    _denv_pull
  else
    printf "%s already exists on this computer - re-pull it? [Y/n] " "${denv_image}"
    read -r ans
    case "${ans}" in
      Y|y)
        _denv_pull
        ;;
      *)
        echo "Not pulling ${denv_image}..."
        ;;
    esac
  fi
}

# update the image used by the denv
# Arguments
#  1 - new image for the denv
_denv_config_image() {
  case "$1" in
    pull)
      # if argument is keyword 'pull' then we simply
      # pull down with the currently configured image tag
      _denv_pull
      ;;
    *)
      # any other argument should be treated as the 
      # new image tag to use for the denv
      denv_image="$1"
      _denv_config_checked_pull
      ;;
  esac
}

# set the shell to be used in the container
# Arguments
#  1+ - command to use as shell in the container
# Outputs
#  sets denv_shell to the entire list of arguments
_denv_config_shell() {
  denv_shell="$*"
}

# add another mount point for the container
# Arguments
#  1+ - path to directory to mount to container
# Outputs
#  updates denv_mounts to include passed directories
_denv_config_mounts() {
  while [ "$#" -gt "0" ]; do
    case "$1" in
      /*)
        # this is a full path
        if [ -d "$1" ]; then
          denv_mounts="$1 ${denv_mounts}"
        else
          _denv_error "'$1' does not exist."
          return 1
        fi
        ;;
      *)
        _denv_error "'$1' is not a full path"
        return 1
        ;;
    esac
    shift
  done
}

# config some config variable
# Arguments
#  1 - varible to config
#  2 - new value for that variable
_denv_config_help() {
  cat <<\HELP

  denv config [help|-h|--help]
  denv config print
  denv config home HOMEDIR
  denv config image [pull|IMAGE]
  denv config mounts DIR0 [DIR1 DIR2 ...]
  denv config shell SHELL

 COMMANDS
  help    print this help and exit
  print   print the deduced config for viewing
  home    set the directory the denv should use as its home directory
  image   set the image you wish to use
          the special keyword 'pull' can be used to
          not change the image being used but to re-download
          the same tag from the remote repository
  mounts  add one or more directories to be mounted to the denv
  shell   change which program is executed when opening
          the denv without any arguments

HELP
}
_denv_config() {
  if [ $# -eq 0 ]; then
    _denv_config_help
    return 0
  fi
  _denv_deduce_workspace
  _denv_load_config
  case "$1" in
    print)
      cmd="_denv_config_${1}"
      ${cmd}
      ;;
    home|image|shell|mounts)
      cmd="_denv_config_${1}"
      if [ "$#" -eq "1" ]; then
        _denv_config_help
        _denv_error "$1 requires an argument."
        return 1
      fi
      shift
      # I think I know what I'm doing
      # shellcheck disable=SC2068
      ${cmd} $@ 
      _denv_write_config
      ;;
    help|-h|--help)
      _denv_config_help
      ;;
    *)
      _denv_error "Unrecognized config argument '$1'"
      return 1
      ;;
  esac
}

# create a new denv workspace
_denv_init_help() {
  cat <<\HELP

  denv init IMAGE [WORKSPACE]

 ARGUMENT
  IMAGE      : the container image to use for running the denv
  WORKSPACE  : the directory to create the denv for
               optional, defaults to present working directory

HELP
}
_denv_init() {
  # check for help request
  if [ $# -eq 0 ]; then
    _denv_init_help
    _denv_error "Provide at least an image to use for running"
    return 1
  fi
  case "$1" in
    help|-h|-help)
      _denv_init_help
      return 0
      ;;
    *)
      ;;
  esac
  # image - first positional and only required argument
  image="$1"
  shift
  # workspace - second positional argument or PWD
  if [ "$#" -eq 0 ]; then
    denv_workspace="${PWD}"
  else
    denv_workspace="$1"
  fi

  # check if we already been init'ed
  if [ -d "${denv_workspace}/.denv" ];then
    printf "This workspace already has a denv. Would you like to overwrite it? [Y/n] "
    read -r ans
    case "${ans}" in
      Y|y)
        # delete old denv and continue below
        rm -rf "${denv_workspace}/.denv"
        ;;
      *)
        echo "Exiting without modifying..."
        return 0
        ;;
    esac
  fi

  # we have a clean workspace directory, lets make a new denv
  denv_home="${denv_workspace}"
  denv_image="${image}"
  denv_shell="/bin/bash -i"
  denv_mounts=""
  mkdir "${denv_workspace}/.denv"
  _denv_write_config
  cat > "${denv_workspace}/.denv/.gitignore" <<\GITIGNORE
# ignore everything in this directory
*
# except the config which folks might want to share
# across many computers
!config
GITIGNORE

  _denv_config_checked_pull
}

# print the denv version
_denv_version() {
  echo "denv v${denv_version}"
}

# root program denv
_denv_help() {
  cat <<\HELP

  denv [COMMAND] [args...]

 DESCRIPTION
  interact with a containerized developers environment

  If not COMMAND is provided, open an interactive shell in
  the currently configured denv.

 COMMANDS
  version : print the version of denv
  init    : initialize a new denv with an image
  config  : modify current denv configuration
  help    : print this help and exit
  <cmd>   : run <cmd> inside denv container

HELP
}
_denv() {
  if [ $# -eq 0 ]; then
    _denv_deduce_workspace
    _denv_load_config
    _denv_run
    return $?
  fi

  case "$1" in
    -h|--help)
      _denv_help
      return 
      ;;
    version|help|config|init)
      cmd="_denv_${1}"
      shift
      # I think I know what I'm doing here
      # shellcheck disable=SC2068
      ${cmd} $@
      return $?
      ;;
    *)
      _denv_deduce_workspace
      _denv_load_config
      # I think I know what I'm doing here
      # shellcheck disable=SC2068
      _denv_run $@
      return $?
      ;;
  esac
}

# I think I know what I'm doing here
# shellcheck disable=SC2068
_denv $@
